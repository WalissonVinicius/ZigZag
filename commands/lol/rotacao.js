/** O Comando "rotacao" mostra os campe√µes gratuitos da semana */

const Discord = require('discord.js')
const TeemoJS = require('teemojs')
const axios = require('axios')

// Fun√ß√£o para remover tags HTML do texto
function removerTagsHTML(texto) {
  if (!texto) return '';
  // Remove tags de cor e outras tags HTML
  return texto.replace(/<(?:.|\n)*?>/gm, '');
}

module.exports = {
  run: async (client, message, args) => {
    if (!process.env.RIOT_API_KEY) {
      return message.channel.send('A chave da API da Riot Games n√£o est√° configurada no arquivo `.env`')
    }

    const api = TeemoJS(process.env.RIOT_API_KEY)
    const region = process.env.LOL_REGION || 'br1'
    const language = 'pt_BR'
    
    try {
      const statusMsg = await message.channel.send('Buscando rota√ß√£o gratuita de campe√µes...')
      
      // Tentar obter a rota√ß√£o de campe√µes
      let rotation = null;
      
      try {
        // Primeiro tentar com TeemoJS
        rotation = await api.get(region, 'champion.getChampionInfo')
        
        if (!rotation || !rotation.freeChampionIds) {
          // Se falhar, tentar com axios diretamente
          const riotApiUrl = `https://${region}.api.riotgames.com/lol/platform/v3/champion-rotations`
          const rotationResponse = await axios.get(riotApiUrl, {
            headers: {
              'X-Riot-Token': process.env.RIOT_API_KEY
            }
          })
          
          rotation = rotationResponse.data
        }
      } catch (apiError) {
        console.error('Erro espec√≠fico na API rota√ß√£o:', apiError);
        
        // Verificar tipos espec√≠ficos de erro
        if (apiError.response && apiError.response.status === 403) {
          await statusMsg.edit('‚ùå Erro: A chave da API da Riot Games √© inv√°lida ou expirou. O administrador do bot precisa gerar uma nova.')
          return
        } else if (apiError.response && apiError.response.status === 429) {
          await statusMsg.edit('‚è≥ Muitas requisi√ß√µes foram feitas √† API da Riot. Tente novamente em alguns minutos.')
          return
        } else {
          // Tentar com axios diretamente se falhar
          try {
            const riotApiUrl = `https://${region}.api.riotgames.com/lol/platform/v3/champion-rotations`
            const rotationResponse = await axios.get(riotApiUrl, {
              headers: {
                'X-Riot-Token': process.env.RIOT_API_KEY
              }
            })
            
            rotation = rotationResponse.data
          } catch (axiosError) {
            console.error('Erro ao buscar com axios:', axiosError)
            await statusMsg.edit('N√£o foi poss√≠vel obter a rota√ß√£o de campe√µes. Tente novamente mais tarde.')
            return
          }
        }
      }
      
      if (!rotation || !rotation.freeChampionIds) {
        await statusMsg.edit('N√£o foi poss√≠vel obter a rota√ß√£o de campe√µes. Tente novamente mais tarde.')
        return
      }
      
      // Obter vers√£o atual do jogo
      let currentVersion = '13.12.1'; // Vers√£o padr√£o como fallback
      
      try {
        const versionsResponse = await axios.get('https://ddragon.leagueoflegends.com/api/versions.json')
        currentVersion = versionsResponse.data[0]
      } catch (versionError) {
        console.error('Erro ao buscar vers√£o atual:', versionError)
      }
      
      // Obter lista de campe√µes para converter IDs em nomes
      let championsData = null;
      
      try {
        const championsResponse = await axios.get(`https://ddragon.leagueoflegends.com/cdn/${currentVersion}/data/${language}/champion.json`)
        championsData = championsResponse.data.data
      } catch (champError) {
        console.error('Erro ao buscar dados de campe√µes:', champError)
        // Tentar com o idioma ingl√™s como fallback
        try {
          const championsResponse = await axios.get(`https://ddragon.leagueoflegends.com/cdn/${currentVersion}/data/en_US/champion.json`)
          championsData = championsResponse.data.data
        } catch (fallbackError) {
          await statusMsg.edit('Erro ao buscar informa√ß√µes dos campe√µes. Tente novamente mais tarde.')
          return
        }
      }
      
      if (!championsData) {
        await statusMsg.edit('Erro ao buscar informa√ß√µes dos campe√µes. Tente novamente mais tarde.')
        return
      }
      
      // Criar mapa de ID para informa√ß√µes do campe√£o
      const championsMap = new Map()
      
      for (const champKey in championsData) {
        const champion = championsData[champKey]
        championsMap.set(parseInt(champion.key), {
          id: champKey,
          name: removerTagsHTML(champion.name),
          title: removerTagsHTML(champion.title)
        })
      }
      
      // Criar embed para rota√ß√£o normal
      const embed = new Discord.MessageEmbed()
        .setTitle('üîÑ Rota√ß√£o Gratuita de Campe√µes')
        .setDescription('Confira os campe√µes gratuitos desta semana!')
        .setColor(process.env.COLOR)
        .setFooter('2024 ¬© League of Legends Bot', 'https://i.imgur.com/LVacCMS.png')
        .setTimestamp()
      
      // Adicionar campe√µes da rota√ß√£o normal
      let normalRotationText = ''
      const championIcons = []
      
      for (const championId of rotation.freeChampionIds) {
        const champion = championsMap.get(championId)
        if (champion) {
          normalRotationText += `‚Ä¢ **${champion.name}** (${champion.title})\n`
          championIcons.push(`https://ddragon.leagueoflegends.com/cdn/${currentVersion}/img/champion/${champion.id}.png`)
        }
      }
      
      embed.addField('Rota√ß√£o Gratuita', normalRotationText || 'N√£o h√° campe√µes na rota√ß√£o gratuita.')
      
      // Adicionar campe√µes da rota√ß√£o para novos jogadores (abaixo do n√≠vel 10)
      if (rotation.freeChampionIdsForNewPlayers && rotation.freeChampionIdsForNewPlayers.length > 0) {
        let newPlayerRotationText = ''
        
        for (const championId of rotation.freeChampionIdsForNewPlayers) {
          const champion = championsMap.get(championId)
          if (champion) {
            newPlayerRotationText += `‚Ä¢ **${champion.name}** (${champion.title})\n`
          }
        }
        
        embed.addField('Rota√ß√£o para Novos Jogadores (abaixo do n√≠vel 10)', 
          newPlayerRotationText || 'N√£o h√° campe√µes na rota√ß√£o para novos jogadores.')
      }
      
      // Adicionar uma imagem com at√© 5 √≠cones de campe√µes na rota√ß√£o
      if (championIcons.length > 0) {
        const iconsToShow = championIcons.slice(0, 5)
        embed.setThumbnail(iconsToShow[0])
      }
      
      await statusMsg.delete().catch(() => {})
      return message.channel.send(embed)
    } catch (error) {
      console.error('Erro ao buscar rota√ß√£o de campe√µes:', error)
      return message.channel.send('Ocorreu um erro ao buscar a rota√ß√£o de campe√µes. Verifique se a API Key da Riot est√° correta e tente novamente.')
    }
  },

  conf: {},

  help: {
    name: 'rotacao',
    category: 'LoL',
    description: 'Mostra os campe√µes gratuitos da semana no League of Legends',
    usage: '!rotacao',
    aliases: ['rotation', 'freeweek', 'free']
  }
} 