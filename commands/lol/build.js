/** O Comando "build" mostra as builds mais populares para um campe√£o */

const Discord = require('discord.js')
const axios = require('axios')

// Fun√ß√£o para remover tags HTML do texto
function removerTagsHTML(texto) {
  if (!texto) return '';
  // Remove tags de cor e outras tags HTML
  return texto.replace(/<(?:.|\n)*?>/gm, '');
}

module.exports = {
  run: async (client, message, args) => {
    if (!args[0]) {
      return message.channel.send(`${message.author}, voc√™ precisa fornecer o nome do campe√£o! Use: \`${process.env.PREFIX}build [nome do campe√£o]\``)
    }

    const championName = args.join(' ').toLowerCase()
    const language = 'pt_BR'
    
    try {
      message.channel.send(`Buscando builds para: \`${args.join(' ')}\`...`)
      
      // Obter vers√£o atual do jogo
      const versionsResponse = await axios.get('https://ddragon.leagueoflegends.com/api/versions.json')
      const currentVersion = versionsResponse.data[0]
      
      // Obter lista de campe√µes
      const championsResponse = await axios.get(`https://ddragon.leagueoflegends.com/cdn/${currentVersion}/data/${language}/champion.json`)
      const champions = championsResponse.data.data
      
      // Encontrar o campe√£o pelo nome (pesquisa parcial)
      let championKey = null
      
      for (const key in champions) {
        const champ = champions[key]
        if (champ.name.toLowerCase() === championName) {
          championKey = key
          break
        } else if (champ.name.toLowerCase().includes(championName)) {
          championKey = key
        }
      }
      
      if (!championKey) {
        return message.channel.send(`Campe√£o \`${args.join(' ')}\` n√£o encontrado. Verifique o nome e tente novamente.`)
      }
      
      // Obter informa√ß√µes detalhadas do campe√£o
      const championResponse = await axios.get(`https://ddragon.leagueoflegends.com/cdn/${currentVersion}/data/${language}/champion/${championKey}.json`)
      const championData = championResponse.data.data[championKey]
      
      // Limpar poss√≠veis tags HTML do nome e t√≠tulo
      const champName = removerTagsHTML(championData.name);
      const champTitle = removerTagsHTML(championData.title);
      
      // Buscar dados de build (simulados - em um bot real, voc√™ buscaria de uma API real como op.gg, u.gg, etc)
      // Neste exemplo estamos simulando a resposta
      const buildData = getSimulatedBuildData(championData)
      
      // Criar embed com as builds
      const embed = new Discord.MessageEmbed()
        .setTitle(`Build para ${champName} - ${champTitle}`)
        .setThumbnail(`https://ddragon.leagueoflegends.com/cdn/${currentVersion}/img/champion/${championData.image.full}`)
        .setDescription(`Build recomendada baseada nas estat√≠sticas atuais.`)
        .setColor(process.env.COLOR)
        .setFooter('2024 ¬© League of Legends Bot', 'https://i.imgur.com/LVacCMS.png')
        .setTimestamp()
      
      // Adicionar informa√ß√µes de runas
      embed.addField('üîÆ Runas Principais', buildData.runas.principais.join('\n'))
      embed.addField('‚≠ê Runas Secund√°rias', buildData.runas.secundarias.join('\n'))
      
      // Adicionar informa√ß√µes de itens iniciais
      embed.addField('üõí Itens Iniciais', buildData.itens.iniciais.join('\n'))
      
      // Adicionar informa√ß√µes de itens principais
      embed.addField('üõ°Ô∏è Build Completa', buildData.itens.completos.join('\n'))
      
      // Adicionar ordem de habilidades
      embed.addField('üìä Ordem de Habilidades', 
        `1-3: ${buildData.habilidades.inicio}\n` +
        `Prioridade: ${buildData.habilidades.ordem}`)
      
      // Adicionar conjuradores
      embed.addField('‚ú® Feiti√ßos de Invocador', buildData.feiticos.join(', '))
      
      // Adicionar informa√ß√µes extras (remover HTML se necess√°rio)
      embed.addField('üí° Dicas', removerTagsHTML(buildData.dicas))
      
      // Adicionar uma imagem do campe√£o
      embed.setImage(`https://ddragon.leagueoflegends.com/cdn/img/champion/splash/${championKey}_0.jpg`)
      
      return message.channel.send(embed)
    } catch (error) {
      console.error('Erro ao buscar build de campe√£o:', error)
      return message.channel.send('Ocorreu um erro ao buscar as informa√ß√µes de build. Tente novamente mais tarde.')
    }
  },

  conf: {},

  help: {
    name: 'build',
    category: 'LoL',
    description: 'Mostra as builds mais populares para um campe√£o do League of Legends',
    usage: '!build [nome do campe√£o]',
    aliases: ['builds', 'guia']
  }
}

// Fun√ß√£o para gerar dados de build simulados com base no tipo de campe√£o
function getSimulatedBuildData(championData) {
  // Determinar o tipo de campe√£o (mago, lutador, atirador, etc.)
  const tags = championData.tags

  // Objetos de builds para diferentes tipos de campe√µes
  const buildTypes = {
    Assassin: {
      runas: {
        principais: ['‚ö° Domina√ß√£o: Colheita Sombria', 'üë£ Gosto de Sangue', 'üëÅÔ∏è Sentinela Zumbi', 'üèÉ Ca√ßador Incans√°vel'],
        secundarias: ['üåÄ Precis√£o: Triunfo', 'üí™ Golpe de Miseric√≥rdia']
      },
      itens: {
        iniciais: ['L√¢mina Longa + 3 Po√ß√µes', 'ou', 'Espada do Doran + Po√ß√£o'],
        completos: ['Garra do Espreitador', 'Botas Ionianas da Lucidez', 'Rastro de Serralum', 'Fio da Infinito', 'Limiar da Noite', 'Anjo Guardi√£o']
      },
      habilidades: {
        inicio: 'Q W E',
        ordem: 'R > Q > E > W'
      },
      feiticos: ['Flash', 'Ignite'],
      dicas: 'Procure eliminar alvos priorit√°rios como magos e atiradores. Aproveite momentos de rota√ß√£o para emboscar inimigos isolados.'
    },
    Mage: {
      runas: {
        principais: ['üîÆ Feiti√ßaria: Invocar Aery', 'üéØ Faixa de Fluxo de Mana', '‚è±Ô∏è Transcend√™ncia', '‚òÑÔ∏è Chamuscar'],
        secundarias: ['üß† Inspira√ß√£o: Entrega de Biscoitos', '‚è∞ Perspic√°cia C√≥smica']
      },
      itens: {
        iniciais: ['Anel do Doran + 2 Po√ß√µes', 'ou', 'Selo do Protetor Sombrio + 2 Po√ß√µes'],
        completos: ['Cap√≠tulo Perdido do Liandry', 'Botas Ionianas da Lucidez', 'Abra√ßo Demon√≠aco', 'Cajado do Arcanjo', 'Ampulheta de Zhonya', 'Chap√©u Deathcap de Rabadon']
      },
      habilidades: {
        inicio: 'Q E W',
        ordem: 'R > Q > W > E'
      },
      feiticos: ['Flash', 'Teleporte'],
      dicas: 'Posicione-se atr√°s do seu time e utilize suas habilidades para controle de grupo. Mantenha dist√¢ncia segura de assassinos e lutadores.'
    },
    Marksman: {
      runas: {
        principais: ['üéØ Precis√£o: Ritmo Fatal', 'ü©∏ Triunfo', 'üíâ Lenda: Linhagem', 'üí™ Golpe de Miseric√≥rdia'],
        secundarias: ['üî¥ Domina√ß√£o: Gosto de Sangue', 'üëÅÔ∏è Ca√ßador Incans√°vel']
      },
      itens: {
        iniciais: ['Espada do Doran + Po√ß√£o', 'ou', 'L√¢mina Longa + 3 Po√ß√µes'],
        completos: ['Mata-Cr√°quens', 'Botas Galvanizadas de A√ßo', 'Furac√£o de Runaan', 'Fio da Infinito', 'Dan√ßarina Fantasma', 'Anjo Guardi√£o']
      },
      habilidades: {
        inicio: 'Q E W',
        ordem: 'R > Q > E > W'
      },
      feiticos: ['Flash', 'Curar'],
      dicas: 'Foque em farmar durante a fase de rotas. Posicione-se bem nas lutas em equipe e ataque sempre o alvo mais pr√≥ximo com seguran√ßa.'
    },
    Fighter: {
      runas: {
        principais: ['üí• Precis√£o: Conquistador', 'ü©∏ Triunfo', 'üîÑ Lenda: Tenacidade', 'üí™ √öltimo Suspiro'],
        secundarias: ['üå≥ Resolu√ß√£o: Demolir', 'üõ°Ô∏è Condicionamento']
      },
      itens: {
        iniciais: ['Escudo do Doran + Po√ß√£o', 'ou', 'L√¢mina do Corrupto + 2 Po√ß√µes'],
        completos: ['Mata-Cr√°quens', 'Botas Galvanizadas de A√ßo', 'Hidra Raivosa', 'For√ßa da Trindade', 'Placa Deadman', 'Esp√≠rito Visagem']
      },
      habilidades: {
        inicio: 'Q E W',
        ordem: 'R > Q > E > W'
      },
      feiticos: ['Flash', 'Teleporte'],
      dicas: 'Use sua mobilidade e resist√™ncia para dividir o mapa e criar press√£o. Busque duelos individuais para tirar vantagem.'
    },
    Tank: {
      runas: {
        principais: ['üå≥ Resolu√ß√£o: Aperto dos Mortos-Vivos', 'üõ°Ô∏è Fonte da Vida', 'üß± Condicionamento', 'ü™® Crescimento Excessivo'],
        secundarias: ['üí• Inspira√ß√£o: Cal√ßados M√°gicos', 'üí´ Perspic√°cia C√≥smica']
      },
      itens: {
        iniciais: ['Escudo do Doran + Po√ß√£o', 'ou', 'Ref√∫gio de Cloth + 4 Po√ß√µes'],
        completos: ['√âgide de Fogo Solar', 'Botas Galvanizadas de A√ßo', 'Cora√ß√£o Congelado', 'Manto da Mortalha', 'Placa Deadman', 'Esp√≠rito Visagem']
      },
      habilidades: {
        inicio: 'Q E W',
        ordem: 'R > Q > W > E'
      },
      feiticos: ['Flash', 'Teleporte'],
      dicas: 'Inicie lutas em equipe e absorva o dano inimigo. Proteja seus aliados de longo alcance e use controle de grupo para desestabilizar o time inimigo.'
    },
    Support: {
      runas: {
        principais: ['üí´ Inspira√ß√£o: Kleptomancia', '‚åö Cal√ßados M√°gicos', 'üç™ Entrega de Biscoitos', '‚è∞ Perspic√°cia C√≥smica'],
        secundarias: ['üîÆ Feiti√ßaria: Manto de Nimbus', '‚è±Ô∏è Transcend√™ncia']
      },
      itens: {
        iniciais: ['Rel√≠quia do Escudo Antigo', 'ou', 'Moeda Antiga de Ladino + 2 Po√ß√µes'],
        completos: ['Mandamento de Shurelya', 'Botas da Mobilidade', 'Reden√ß√£o', 'Incens√≥rio de Mikael', 'Converg√™ncia de Zeke', 'Prote√ß√£o do Cavaleiro']
      },
      habilidades: {
        inicio: 'Q W E',
        ordem: 'R > W > E > Q'
      },
      feiticos: ['Flash', 'Ignite'],
      dicas: 'Mantenha seu atirador seguro durante a fase de rotas. Providencie vis√£o constante do mapa e ajude o jungler em objetivos.'
    }
  }

  // Verificar o tipo principal do campe√£o
  let buildType = 'Fighter' // Padr√£o
  
  for (const tag of tags) {
    if (buildTypes[tag]) {
      buildType = tag
      break
    }
  }
  
  return buildTypes[buildType]
} 